{"version":3,"file":"component---src-templates-home-jsx-f6e95d493155077c0ef3.js","mappings":"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","sources":["webpack://goharbar_website/./src/components/Layout/Blog/Cards/ArticleCard.jsx","webpack://goharbar_website/./src/components/Layout/Hero/styles.js","webpack://goharbar_website/./src/components/Layout/Hero/index.jsx","webpack://goharbar_website/./src/components/Layout/RichText/styles.js","webpack://goharbar_website/./src/components/Layout/RichText/index.jsx","webpack://goharbar_website/./src/components/Layout/sharedStyles/uncontrolledHTMLStyles.js","webpack://goharbar_website/./src/functions/formatDateTime.js","webpack://goharbar_website/./src/hooks/useFormattedDate.js","webpack://goharbar_website/./src/templates/Home.jsx"],"sourcesContent":["import { useFormattedDate } from '../../../../hooks/useFormattedDate';\n\nimport {\n  CardLink,\n  CategoryBox,\n  ContentWrapper,\n  PostTitle,\n  Date,\n  Excerpt,\n  AuthorCtaContainer,\n  AuthorContainer,\n  AuthorImg,\n  artDirectedCardImgs,\n  CardImgContainer,\n  CardImg,\n} from './styles';\n\nexport const ArticleCard = ({\n  recordId,\n  date,\n  title,\n  excerpt,\n  authorImg,\n  authorName,\n  category,\n  cardImg,\n  cardImgMobile,\n  altImg,\n}) => {\n  const images = artDirectedCardImgs(cardImg, cardImgMobile);\n\n  const { formattedDate } = useFormattedDate(date);\n\n  return (\n    <article>\n      <CardLink recordId={recordId}>\n        <CardImgContainer>\n          <CardImg objectFit=\"cover\" image={images} alt={altImg || ''} />\n        </CardImgContainer>\n        <ContentWrapper>\n          {category && <CategoryBox>{category.title}</CategoryBox>}\n          <Date>{formattedDate}</Date>\n          <PostTitle>{title}</PostTitle>\n          <Excerpt>{excerpt}</Excerpt>\n          <AuthorCtaContainer>\n            <AuthorContainer>\n              <AuthorImg\n                objectFit=\"cover\"\n                image={authorImg || ''}\n                alt={authorName || ''}\n              />\n              <Date as=\"address\">{authorName}</Date>\n            </AuthorContainer>\n          </AuthorCtaContainer>\n        </ContentWrapper>\n      </CardLink>\n    </article>\n  );\n};\n","import styled, { css } from 'styled-components';\n\nconst Wrapper = styled.section`\n  display: grid;\n  background-color: #f1defa;\n  padding: var(--globalPaddingTb) var(--globalPaddingLr);\n  margin: auto;\n  row-gap: var(--gapXL);\n  max-width: var(--globalContainer);\n  align-items: center;\n\n  ${({ isFullViewport }) =>\n    isFullViewport &&\n    css`\n      justify-content: center;\n      height: 100vh;\n\n      & > div {\n        justify-items: center;\n        text-align: center;\n      }\n    `};\n`;\n\nconst TextBox = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n  row-gap: var(--gapRegular);\n  width: 600px;\n  height: max-content;\n\n  @media (max-width: 768px) {\n    width: 100%;\n  }\n`;\n\nconst Caption = styled.h2`\n  color: var(--primaryColor);\n  font-size: var(--baseXL);\n  text-transform: uppercase;\n  letter-spacing: 0.1em;\n  line-height: var(--headingsLineHeight);\n  font-weight: 400;\n`;\n\nconst Title = styled.h1`\n  font-size: var(--headingXXL);\n  color: var(--headingsColor);\n  line-height: var(--headingsLineHeight);\n\n  @media (max-width: 768px) {\n    font-size: var(--headingXL);\n  }\n`;\n\nconst Subtitle = styled.p`\n  font-size: var(--baseXL);\n  color: var(--baseTextColor);\n  line-height: var(--bodyLineHeight);\n`;\n\nexport { Wrapper, TextBox, Caption, Title, Subtitle };\n","import { Wrapper, TextBox, Caption, Title, Subtitle } from './styles';\n\nexport const Hero = ({\n  caption,\n  title,\n  subtitle,\n  button,\n  sectionChildren,\n  isFullViewport,\n}) => (\n  <Wrapper isFullViewport={isFullViewport}>\n    <TextBox>\n      {caption && <Caption>{caption}</Caption>}\n      <Title>{title}</Title>\n      <Subtitle>{subtitle}</Subtitle>\n      {button}\n    </TextBox>\n    {sectionChildren}\n  </Wrapper>\n);\n","// Rich Text Container - Used for common mdx or StructuredText containers outside the blog\n\nimport styled, { css } from 'styled-components';\nimport { uncontrolledHTMLStyles } from '../sharedStyles/uncontrolledHTMLStyles';\n\nexport const RichTextStyles = styled.div`\n  ${uncontrolledHTMLStyles};\n\n  ${({ isRtl }) =>\n    isRtl\n      ? css`\n          ol,\n          ul {\n            padding-right: 1.33em;\n          }\n        `\n      : css`\n          ol,\n          ul {\n            padding-left: 1.33em;\n          }\n        `}\n\n  --paragraphMargin: 0 0 1em 0;\n  --listMargin: 0 0 0.33em 0;\n  color: var(--baseTextColor);\n  font-size: var(--baseM);\n  line-height: 1.4;\n  text-align: inherit;\n\n  & a {\n    color: var(--primaryColor);\n    text-decoration: underline;\n  }\n\n  & > p {\n    margin: var(--paragraphMargin);\n\n    &:only-child,\n    &:last-child {\n      margin: 0;\n    }\n  }\n\n  & code {\n    background: var(--inlineCodeBackgroundColor);\n    padding: 0.1em 0.2em;\n    border-radius: 5px;\n    color: var(--inlineCodeTextColor);\n  }\n\n  @media (max-width: 768px) {\n    font-size: var(--baseMMobile);\n  }\n`;\n","import { useTextDirection } from '../../../hooks/useTextDirection';\nimport { RichTextStyles } from './styles';\n\nexport const RichText = ({ children }) => {\n  const { isRtl } = useTextDirection();\n  return <RichTextStyles isRtl={isRtl}>{children}</RichTextStyles>;\n};\n","import { css } from 'styled-components';\n\n/**\n * Base styles added to any component rendering uncontrolled vanilla\n * HTML such as Markdown or Structured Text\n */\n\nexport const uncontrolledHTMLStyles = css`\n  & ol {\n    list-style-type: decimal;\n    margin: var(--paragraphMargin);\n    line-height: 1.6;\n\n    & li {\n      & > ol {\n        list-style-type: lower-roman;\n        margin: var(--listMargin);\n      }\n      & p {\n        margin: 0;\n      }\n      &::marker {\n        color: var(--baseTextColor);\n        font-size: var(--baseL);\n      }\n    }\n  }\n\n  & ul {\n    list-style-type: disc;\n    margin: var(--paragraphMargin);\n    line-height: 1.6;\n\n    & li {\n      & > ul {\n        margin: var(--listMargin);\n      }\n      & p {\n        margin: 0;\n      }\n      &::marker {\n        color: var(--baseTextColor);\n        font-size: var(--baseM);\n      }\n    }\n  }\n\n  & a {\n    color: var(--primaryColor);\n    text-decoration: underline;\n\n    & > code {\n      background: var(--inlineCodeBackgroundColor);\n      padding: 0.1em 0.2em;\n      border-radius: 5px;\n    }\n  }\n\n  & p > code {\n    background: var(--inlineCodeBackgroundColor);\n    color: var(--inlineCodeTextColor);\n    padding: 0.1em 0.2em;\n    border-radius: 5px;\n  }\n\n  & mark {\n    background: var(--markBackgroundColor);\n    color: var(--markTextColor);\n  }\n\n  /* Code block styles */\n\n  & pre {\n    padding: var(--globalPaddingLr) !important;\n    border-radius: var(--defaultRadius) !important;\n    margin: var(--paragraphMargin) !important;\n    background: var(--codeBlockBackgroundColor) none repeat scroll 0% 0% !important;\n    border: var(--borderSmall) solid var(--dividerColor) !important;\n\n    @media (max-width: 800px) {\n      border-radius: 0 !important;\n      margin: var(--paragraphBottomMargin) calc(var(--globalPaddingLr) * -1) !important;\n    }\n\n    & code {\n      font-family: var(--defaultCodeStack) !important;\n    }\n  }\n`;\n","const timeOptions = {\n  hour: '2-digit',\n  minute: '2-digit',\n};\n\nconst dateOptions = {\n  year: 'numeric',\n  month: 'short',\n  day: 'numeric',\n};\n\nconst formatDateTime = (dateString, contextLocale) =>\n  new Date(dateString).toLocaleString(contextLocale, {\n    ...dateOptions,\n    ...timeOptions,\n  });\n\nconst formatDate = (dateString, contextLocale) =>\n  new Date(dateString).toLocaleString(contextLocale, {\n    ...dateOptions,\n  });\n\nexport { formatDateTime, formatDate };\n","import { useContext } from 'react';\n\nimport { LocaleContext } from '../components/ContextProviders/LocaleProvider';\nimport { formatDate } from '../functions/formatDateTime';\n\nexport const useFormattedDate = (dateString) => {\n  const { pageLocale } = useContext(LocaleContext);\n\n  const formattedDate = formatDate(dateString, pageLocale);\n\n  return { formattedDate };\n};\n","import { graphql } from 'gatsby';\n\nimport { PageWrapper } from '../components/Layout/PageWrapper';\nimport { Hero } from '../components/Layout/Hero';\nimport { Navigator } from '../components/Navigator';\nimport { RichText } from '../components/Layout/RichText';\nimport { ArticleCard } from '../components/Layout/Blog/Cards/ArticleCard';\n\nimport {\n  SectionGridThreeCols,\n  GridTextBox,\n} from '../components/Layout/sharedStyles/sectionStyles';\nimport {\n  HeadingSmallWithTip,\n  SectionTitle,\n} from '../components/Layout/sharedStyles/headingStyles';\n\nconst HomepageTemplate = ({\n  data: {\n    datoCmsHomepage: {\n      seo,\n      hero: [{ heroAlt, heroTitle, heroSubtitle }],\n      features,\n      calltoaction,\n      featuredPostsTitle,\n    },\n    datoCmsBlogRoot: { id },\n    allBlogPosts: { postNodes },\n    datoCmsMiscTextString: { seeAllPosts },\n  },\n  pageContext,\n}) => (\n  <PageWrapper\n    pageData={pageContext}\n    seoTitle={seo?.seoTitle}\n    seoDescription={seo?.seoDescription}\n    seoImage={seo?.seoImage?.seoImageUrl}\n  >\n    <Hero\n      caption={heroAlt}\n      title={heroTitle}\n      subtitle={heroSubtitle}\n      button={\n        <Navigator className=\"classicButton classicButtonOutline\" recordId={id}>\n          {seeAllPosts}\n        </Navigator>\n      }\n      sectionChildren={\n        <SectionGridThreeCols noPaddings>\n          {features.map(({ id: featureId, title, description }) => (\n            <GridTextBox small key={featureId}>\n              <HeadingSmallWithTip>{title}</HeadingSmallWithTip>\n              <RichText>{description}</RichText>\n            </GridTextBox>\n          ))}\n        </SectionGridThreeCols>\n      }\n    />\n    <Hero\n      caption={calltoaction}\n      title={calltoaction}\n      subtitle={heroSubtitle}\n    />\n    {postNodes.length > 0 && (\n      <section style={{ paddingTop: 'var(--globalPaddingTb)' }}>\n        <SectionTitle>{featuredPostsTitle}</SectionTitle>\n        <SectionGridThreeCols>\n          {postNodes.map(\n            ({\n              id: recordId,\n              meta: { updatedAt },\n              title,\n              coverImage,\n              subtitle,\n              author: {\n                authorName,\n                picture: { authorImageData },\n              },\n              categoryLink,\n            }) => (\n              <ArticleCard\n                key={recordId}\n                recordId={recordId}\n                date={updatedAt}\n                category={categoryLink}\n                cardImg={coverImage.gatsbyImageData}\n                cardImgMobile={coverImage.squaredImage}\n                altImg={title}\n                title={title}\n                excerpt={subtitle}\n                authorImg={authorImageData}\n                authorAltImg={authorName}\n                authorName={authorName}\n              />\n            )\n          )}\n        </SectionGridThreeCols>\n      </section>\n    )}\n  </PageWrapper>\n);\n\nexport default HomepageTemplate;\n\nexport const query = graphql`\n  query HomepageQuery($locale: String!) {\n    datoCmsHomepage(locale: { eq: $locale }) {\n      locale\n      seo {\n        seoTitle: title\n        seoDescription: description\n        seoImage: image {\n          seoImageUrl: url\n        }\n      }\n      hero {\n        heroAlt\n        heroTitle\n        heroSubtitle\n      }\n      calltoaction\n      features {\n        id: originalId\n        title\n        description\n      }\n      featuredPostsTitle\n    }\n    datoCmsBlogRoot(locale: { eq: $locale }) {\n      locale\n      id: originalId\n    }\n    allBlogPosts: allDatoCmsBlogPost(\n      filter: {\n        locale: { eq: $locale }\n        featuredInHomepage: { eq: true }\n        noTranslate: { ne: true }\n        categoryLink: { noTranslate: { ne: true } }\n      }\n      sort: { order: ASC, fields: meta___updatedAt }\n      limit: 6\n    ) {\n      postNodes: nodes {\n        locale\n        id: originalId\n        meta {\n          updatedAt\n        }\n        categoryLink {\n          title\n        }\n        coverImage {\n          gatsbyImageData(\n            width: 300\n            height: 120\n            placeholder: NONE\n            forceBlurhash: false\n          )\n          squaredImage: gatsbyImageData(\n            width: 100\n            height: 100\n            imgixParams: { ar: \"1\", fit: \"crop\" }\n          )\n        }\n        author {\n          authorName: name\n          picture {\n            authorImageData: gatsbyImageData(\n              height: 30\n              width: 30\n              placeholder: NONE\n            )\n          }\n        }\n        subtitle\n        title\n      }\n    }\n    datoCmsMiscTextString(locale: { eq: $locale }) {\n      locale\n      seeAllPosts\n    }\n  }\n`;\n"],"names":["ArticleCard","recordId","date","title","excerpt","authorImg","authorName","category","cardImg","cardImgMobile","altImg","images","artDirectedCardImgs","formattedDate","useFormattedDate","objectFit","image","alt","as","Wrapper","styled","isFullViewport","css","TextBox","Caption","Title","Subtitle","Hero","caption","subtitle","button","sectionChildren","RichTextStyles","uncontrolledHTMLStyles","isRtl","RichText","children","useTextDirection","timeOptions","hour","minute","dateOptions","year","month","day","formatDateTime","dateString","contextLocale","Date","toLocaleString","formatDate","pageLocale","useContext","LocaleContext","data","datoCmsHomepage","seo","hero","heroAlt","heroTitle","heroSubtitle","features","calltoaction","featuredPostsTitle","id","datoCmsBlogRoot","postNodes","allBlogPosts","seeAllPosts","datoCmsMiscTextString","pageContext","pageData","seoTitle","seoDescription","seoImage","seoImageUrl","className","noPaddings","map","featureId","description","small","length","style","paddingTop","updatedAt","meta","coverImage","author","authorImageData","picture","categoryLink","gatsbyImageData","squaredImage","authorAltImg"],"sourceRoot":""}